<!DOCTYPE html>
<html>
<head>
  <title>Dashboard</title>
</head>
<body>
  <h1>Room: <%= roomId %></h1>

  <div id="videos">
    <video id="localVideo" autoplay muted></video>
  </div>

  <button id="leaveBtn">Leave Meeting</button>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const room = "<%= roomId %>";
    const localVideo = document.getElementById("localVideo");
    const videosDiv = document.getElementById("videos");
    const leaveBtn = document.getElementById("leaveBtn");

    let localStream;
    const peers = {}; // peerId -> RTCPeerConnection
    const servers = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };

    async function startMedia() {
      localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      localVideo.srcObject = localStream;
    }

    function createPeerConnection(peerId) {
      const pc = new RTCPeerConnection(servers);

      localStream.getTracks().forEach(track => pc.addTrack(track, localStream));

      pc.ontrack = event => {
        if (!document.getElementById(peerId)) {
          const video = document.createElement("video");
          video.id = peerId;
          video.autoplay = true;
          video.srcObject = event.streams[0];
          videosDiv.appendChild(video);
        }
      };

      pc.onicecandidate = event => {
        if (event.candidate) {
          socket.emit("candidate", { candidate: event.candidate, to: peerId });
        }
      };

      return pc;
    }

    async function joinRoom() {
      await startMedia();
      socket.emit("join", room);
    }

    // Handle new user connection
    socket.on("user-connected", async (peerId) => {
      const pc = createPeerConnection(peerId);
      peers[peerId] = pc;

      const offer = await pc.createOffer();
      await pc.setLocalDescription(offer);
      socket.emit("offer", { offer, to: peerId });
    });

    // Handle incoming offer
    socket.on("offer", async ({ offer, from }) => {
      const pc = createPeerConnection(from);
      peers[from] = pc;

      await pc.setRemoteDescription(new RTCSessionDescription(offer));
      const answer = await pc.createAnswer();
      await pc.setLocalDescription(answer);
      socket.emit("answer", { answer, to: from });
    });

    // Handle incoming answer
    socket.on("answer", async ({ answer, from }) => {
      const pc = peers[from];
      await pc.setRemoteDescription(new RTCSessionDescription(answer));
    });

    // Handle ICE candidates
    socket.on("candidate", async ({ candidate, from }) => {
      const pc = peers[from];
      if (pc) {
        await pc.addIceCandidate(new RTCIceCandidate(candidate));
      }
    });

    // Handle user disconnect
    socket.on("user-disconnected", (peerId) => {
      if (peers[peerId]) {
        peers[peerId].close();
        delete peers[peerId];
        const video = document.getElementById(peerId);
        if (video) videosDiv.removeChild(video);
      }
    });

    // Leave meeting
    leaveBtn.addEventListener("click", () => {
      for (const pc of Object.values(peers)) {
        pc.close();
      }
      localStream.getTracks().forEach(track => track.stop());
      window.location.href = "/"; // redirect to homepage
    });

    joinRoom(); // automatically join on page load
  </script>
</body>
</html>
